{
    "swagger": "2.0",
    "info": {
        "description": "Freelance application API in go using Gin frame work",
        "title": "GigaHive",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:7000",
    "basePath": "/",
    "paths": {
        "/admin/login": {
            "post": {
                "description": "Authenticate user with provided credentials and generate JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "adminauthentication"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "admin login information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Incorrect username or password",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/user/block": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Block a user by updating the 'is_blocked' field in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Block a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID to block",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully blocked user",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Failed to find user\" or \"User already blocked\" or \"Failed to block user",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/admin/user/list": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieve a list of all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "admin"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/freelancer/login": {
            "post": {
                "description": "Authenticate user with provided credentials and generate JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "freelancer"
                ],
                "summary": "Freelancer login",
                "parameters": [
                    {
                        "description": "User login information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Incorrect username or password",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/freelancer/signup": {
            "post": {
                "description": "Register a new freelancer with the provided information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "freelancer"
                ],
                "summary": "Register a new freelancer",
                "parameters": [
                    {
                        "description": "freelancer registration information",
                        "name": "freelancer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Freelancer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registration successful",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "409": {
                        "description": "Conflict - Username or phone number already exists",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/freelancer/signup/otpverification": {
            "post": {
                "description": "Otp verification with email id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "freelancer"
                ],
                "summary": "Otp verfication of a new freelancer",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/freelancercontrollers.OtpVerifiaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registration successful",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "409": {
                        "description": "Conflict - Username or phone number already exists",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Authenticate user with provided credentials and generate JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Incorrect username or password",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/signup": {
            "post": {
                "description": "Register a new user with the provided information.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registration successful",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "409": {
                        "description": "Conflict - Username or phone number already exists",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        },
        "/user/signup/otpverification": {
            "post": {
                "description": "Otp verification with email id.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "authentication"
                ],
                "summary": "Otp verfication of a new user",
                "parameters": [
                    {
                        "description": "User registration information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usercontrollers.OtpVerifiaction"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registration successful",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "409": {
                        "description": "Conflict - Username or phone number already exists",
                        "schema": {
                            "type": "json"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "json"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "freelancercontrollers.OtpVerifiaction": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp": {
                    "type": "string"
                }
            }
        },
        "models.Freelancer": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "fullname": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4
                },
                "id": {
                    "type": "integer"
                },
                "isblocked": {
                    "type": "boolean"
                },
                "otp": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "qualification": {
                    "type": "string"
                },
                "tools": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4
                },
                "validate": {
                    "type": "boolean"
                }
            }
        },
        "models.Login": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstname": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4
                },
                "id": {
                    "type": "integer"
                },
                "isblocked": {
                    "type": "boolean"
                },
                "lastname": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4
                },
                "otp": {
                    "type": "integer"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string",
                    "maxLength": 10,
                    "minLength": 10
                },
                "username": {
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 4
                },
                "validate": {
                    "type": "boolean"
                }
            }
        },
        "usercontrollers.OtpVerifiaction": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "otp": {
                    "type": "integer"
                }
            }
        }
    }
}